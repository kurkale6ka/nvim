# Hash bang using the env command
snippet #
#! /usr/bin/env ${1:bash}
endsnippet

snippet read
read -p '${1:Enter value}: ' ${2:var}
endsnippet

snippet p "Color message"
printf "${_${1:ylw}}$2${_res}\n"
endsnippet

snippet p "Variables"
printf '%s\n' "\$$1"
endsnippet

snippet p "Variables with color"
printf '%s\n' "${_${1:ylw}}$2${_res}\n"
endsnippet

snippet doc
cat << '${1:EOM}'
$2
$1
endsnippet

snippet doc-
   cat <<- '${1:EOM}'
`!v nr2char(9)`${2:Usage:}
`!v nr2char(9)`  $3
`!v nr2char(9)`$1
endsnippet

snippet fun
${1:name}() {
   ${2:commands}
}
endsnippet

snippet alias
alias ${1:name}='$2'
endsnippet

snippet _
/dev/null
endsnippet

snippet trap
trap '${1:exit 0}' ${2:INT TERM}
endsnippet

snippet \\
# same as xargs -P30
# Run batches of up to 30 (read explanation below) jobs in parallel
# When you reach a certain number of bg processes, bash starts disowning
# the oldest processes, meaning you lose control over them
cmd &
((i++)); ((i % 30 == 0)) && wait
endsnippet

snippet join
printf -v ${1:var} "%s${2:|}" "${${3:array}[@]}"
$1="${$1%$2}"
endsnippet

## Skeleton
snippet skel
#! /usr/bin/env bash

# ${1:Short Description}
#
# Author: `g:snips_author` <mitkofr@yahoo.fr>
# -------------------------------------------

${2:shopt -s extglob}
endsnippet

## Colors
snippet colors "Simple"
_${1:ylw}="$(tput setaf ${2:3} || tput AF $2)"
_res="$(tput sgr0 || tput me)"
endsnippet

snippet colors "Complete"
_bld="$(tput bold || tput md)"
_udl="$(tput smul || tput us)" # underline
_blk="$(tput setaf 0 || tput AF 0)"
_red="$(tput setaf 1 || tput AF 1)"
_grn="$(tput setaf 2 || tput AF 2)"
_ylw="$(tput setaf 3 || tput AF 3)"
_blu="$(tput setaf 4 || tput AF 4)"
_pur="$(tput setaf 5 || tput AF 5)"
_cya="$(tput setaf 6 || tput AF 6)"
_whi="$(tput setaf 7 || tput AF 7)"
_res="$(tput sgr0 || tput me)" # reset

# setaf -> foreground
# setab -> background
_${1:ylw}="$_bld$(tput setaf ${2:3} || tput AF $2)$(tput setab ${3:4} || tput AB $3)"
endsnippet

## Loops
snippet for "for variable in words" !
for ${1:i} in ${2:"\$@"}
do
   ${3:echo} "\$$1"
done
endsnippet

snippet for "for variable in range"
for ${1:i} in \{${2:start}..${3:end}}
do
   ${4:echo} "\$$1"
done
endsnippet

snippet for "C-like for"
for ((${1:i} = ${2:0}; $1 < ${3:10}; $1++))
do
   ${4:commands}
done
endsnippet

snippet while
while ${1:command}
do
   ${2:commands}
done
endsnippet

snippet until
until ${1:command}
do
   ${2:commands}
done
endsnippet

## Switch / select
snippet case "Case" !
case "\$${1:variable}" in
   ${2:glob1}) ${3:command};;
   ${4:glob2}) ${5:command};;
   ${6:glob3}) ${7:command};;
   *) ${8:default_command};;
esac
endsnippet

snippet case "Select"
options[0]='$1'
options[1]='$2'
options[2]='$3'

select choice in "${options[@]}"
do
   case "$choice" in
      "${options[0]}") $4; break;;
      "${options[1]}") $5; break;;
      "${options[2]}") $6; break;;
   esac
   echo '*** Wrong choice ***'
done
endsnippet

snippet opts
OPTIND=1

local opt
while getopts :$1 opt
do
   case "$opt" in
       $2) $3 ;;
      \?) echo "Invalid option: -$OPTARG" 1>&2
          return 1 ;;
       :) echo "Option -$OPTARG requires an argument" 1>&2
          return 2 ;;
   esac
   [[ $OPTARG == -* ]] && { echo "No dashes allowed in -$opt's argument" 1>&2; return 3; }
done

shift "$((OPTIND-1))"
endsnippet

## if
snippet if "Commands" !
if ${1:commands}
then
   ${2:commands}
fi
endsnippet

snippet if "String comparison"
if [[ ${1:'test'} ${2:==} ${3:\$right_operand} ]]
then
   ${4:commands}
fi
endsnippet

snippet if "Digit comparison"
if (( ${1:0} ${2:<} ${3:j} ))
then
   ${4:commands}
fi
endsnippet

## Arrays
snippet [ "Create an array"
${1:array}=(${2:words})
endsnippet

snippet [ "Use an array"
"${${1:array}[@]}"
endsnippet

## help
snippet h
shopt -s extglob

_help() {
   local info='Usage: $1'
   if ((\$1 == 0))
   then echo "$info"
   else echo "$info" >&2
   fi
   exit "\$1"
}

[[ \$1 == @(-h|--help) ]] && _help 0
endsnippet

snippet help
shopt -s extglob

## Colors
_red="$(tput setaf 1 || tput AF 1)"
_res="$(tput sgr0 || tput me)"

## Help
_help() {
local info
read -r -d $'\0' info << 'HELP'
Usage:
   $1
HELP
if ((\$1 == 0))
then echo "$info"
else echo "$info" >&2
fi
exit "\$1"
}

## Checks
[[ \$1 == @(-h|--help) ]] && _help 0

# Arguments
if (($# != 2))
then
   echo "${_red}Wrong number of arguments$_res!" >&2
   _help 1
fi
endsnippet

## read a 'file'
snippet <> "Read command's output"
while IFS= read -r
do
   ${1:"\$REPLY"}
done < <($2)
endsnippet

snippet <> "Read find's output"
while IFS= read -r -d \$'\0'
do
   ${1:"\$REPLY"}
done < <(find ${2:/} -xdev $3 -print0)
endsnippet

snippet <> "Read a heredoc"
while IFS= read -r ${1:line}
do
   [[ $$1 = \#* ]] && continue
   echo "$$1"
done << EOF
$2
EOF
endsnippet

## Extended globs
snippet * "Enable extended globs"
shopt -s extglob
endsnippet

snippet * "Use extended globs"
${1:@?*+!}(${2:item1}|${3:item2})
endsnippet

## $1 $2 $3 $4 $5 $6 $7 $8 $9
snippet 0
"\$\{${1:0}\}"
endsnippet

snippet 1
"\$\{${1:1}\}"
endsnippet

snippet 2
"\$\{${1:2}\}"
endsnippet

snippet 3
"\$\{${1:3}\}"
endsnippet

snippet 4
"\$\{${1:4}\}"
endsnippet

snippet 5
"\$\{${1:5}\}"
endsnippet

snippet 6
"\$\{${1:6}\}"
endsnippet

snippet 7
"\$\{${1:7}\}"
endsnippet

snippet 8
"\$\{${1:8}\}"
endsnippet

snippet 9
"\$\{${1:9}\}"
endsnippet

## Parameter expansion
snippet $ "# remove from start"
"\$\{${1:var}#$2}"
endsnippet

snippet $ "% remove from end"
"\$\{${1:var}%$2}"
endsnippet

snippet $ "/ replace"
"\$\{${1:var}/${2:old}/${3:new}}"
endsnippet

snippet $ ": substring"
"\$\{${1:var}:${2:start}:${3:length}}"
endsnippet

snippet $ "length"
"\$\{#${1:var}}"
endsnippet

snippet $ "Parameter expansion on arrays"
"\$\{${1:array}[@]$2#%:/}"
endsnippet

## Multiline variable
snippet var
read -r -d $'\0' ${1:var} << '${2:VALUE}'
$3
$2
endsnippet

## Error
snippet e
1>&2
endsnippet

snippet E
cat 1>&2 << 'HELP'
$1
HELP
endsnippet
