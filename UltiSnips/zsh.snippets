# Hash bang using the env command
snippet #
#! /usr/bin/env ${1:zsh}
endsnippet

snippet read
read '${1:var}?${2:prompt}: '
endsnippet

snippet p
print -P '%F{${1:yellow}}$2%f'
endsnippet

snippet doc
cat << '${1:EOM}'
$2
$1
endsnippet

snippet doc-
   cat <<- '${1:EOM}'
`!v nr2char(9)`${2:Usage:}
`!v nr2char(9)`  $3
`!v nr2char(9)`$1
endsnippet

snippet fun
${1:name}() {
   ${2:commands}
}
endsnippet

snippet alias
alias ${1:name}='$2'
endsnippet

snippet _
/dev/null
endsnippet

snippet trap
trap '${1:exit 0}' ${2:INT TERM}
endsnippet

snippet \\
# same as xargs -P30
# Run batches of up to 30 (read explanation below) jobs in parallel
# When you reach a certain number of bg processes, bash starts disowning
# the oldest processes, meaning you lose control over them
cmd &
((i++)); ((i % 30 == 0)) && wait
endsnippet

snippet join
${(j.${1::}.)${2:array}}
endsnippet

## Skeleton
snippet skel
#! /usr/bin/env zsh

# ${1:Short Description}
#
# Author: `g:snips_author` <mitkofr@yahoo.fr>
# -------------------------------------------

${2:setopt extended_glob}
endsnippet

## Loops
snippet for "for variable in words" !
for ${1:i} in ${2:"\$@"}
do
   ${3:echo} \$$1
done
endsnippet

snippet for "for variable in range"
for ${1:i} in \{${2:start}..${3:end}}
do
   ${4:echo} \$$1
done
endsnippet

snippet for "C-like for"
for ((${1:i} = ${2:0}; $1 < ${3:10}; $1++))
do
   ${4:commands}
done
endsnippet

snippet while
while ${1:command}
do
   ${2:commands}
done
endsnippet

snippet until
until ${1:command}
do
   ${2:commands}
done
endsnippet

## Switch / select
snippet case "Case" !
case \$${1:variable} in
   (${2:glob1}) ${3:command};;
   (${4:glob2}) ${5:command};;
   (${6:glob3}) ${7:command};;
   (*) ${8:default_command};;
esac
endsnippet

snippet case "Select"
opts[1]='$1'
opts[2]='$2'
opts[3]='$3'

select choice in $opts
do
   case $choice in
      (${opts[1]}) $4; break;;
      (${opts[2]}) $5; break;;
      (${opts[3]}) $6; break;;
   esac
   echo '*** Wrong choice ***'
done
endsnippet

snippet opts
OPTIND=1

local opt
while getopts :$1 opt
do
   case $opt in
       $2) $3 ;;
      \?) echo "Invalid option: -$OPTARG" 1>&2
          return 1 ;;
   esac
done

shift $((OPTIND-1))
endsnippet

## if
snippet if "Commands" !
if ${1:commands}
then
   ${2:commands}
fi
endsnippet

snippet if "String comparison"
if [[ ${1:'test'} ${2:==} ${3:\$right_operand} ]]
then
   ${4:commands}
fi
endsnippet

snippet if "Digit comparison"
if (( ${1:0} ${2:<} ${3:j} ))
then
   ${4:commands}
fi
endsnippet

## Arrays
snippet [
${1:array}=(${2:words})
endsnippet

## Help
snippet h
_help() {
   local info='Usage: $1'
   if ((\$1 == 0))
   then echo $info
   else echo $info >&2
   fi
}

[[ \$1 == (-h|--help) ]] && _help 0
endsnippet

snippet help
## Help
_help() {
local info
read -r -d $'\0' info << 'HELP'
Usage:
   $1
HELP
if ((\$1 == 0))
then echo $info
else echo $info >&2
fi
}

## Checks
[[ \$1 == (-h|--help) ]] && _help 0

# Arguments
if (($# != 2))
then
   print -P '%F{red}Wrong number of arguments%f!' 1>&2
   _help 1
fi
endsnippet

## read a 'file'
snippet <> "Read command's output"
while IFS= read -r
do
   ${1:\$REPLY}
done < <($2)
endsnippet

snippet <> "Read find's output"
while IFS= read -r -d \$'\0'
do
   ${1:\$REPLY}
done < <(find ${2:/} -xdev $3 -print0)
endsnippet

snippet <> "Read a heredoc"
while IFS= read -r ${1:line}
do
   [[ $$1 = \#* ]] && continue
   echo $$1
done << EOF
$2
EOF
endsnippet

## $1 $2 $3 $4 $5 $6 $7 $8 $9
snippet 0
\$\{${1:0}\}
endsnippet

snippet 1
\$\{${1:1}\}
endsnippet

snippet 2
\$\{${1:2}\}
endsnippet

snippet 3
\$\{${1:3}\}
endsnippet

snippet 4
\$\{${1:4}\}
endsnippet

snippet 5
\$\{${1:5}\}
endsnippet

snippet 6
\$\{${1:6}\}
endsnippet

snippet 7
\$\{${1:7}\}
endsnippet

snippet 8
\$\{${1:8}\}
endsnippet

snippet 9
\$\{${1:9}\}
endsnippet

## Parameter expansion
snippet $ "# remove from start"
\$\{${1:var}#$2}
endsnippet

snippet $ "% remove from end"
\$\{${1:var}%$2}
endsnippet

snippet $ "/ replace"
\$\{${1:var}/${2:old}/${3:new}}
endsnippet

snippet $ ": substring"
\$\{${1:var}:${2:start}:${3:length}}
endsnippet

snippet $ "length"
\$\{#${1:var}}
endsnippet

snippet $ "Parameter expansion on arrays"
\$\{${1:array}[@]$2#%:/}
endsnippet

## Globs
snippet **/*
(${1:^.git}/)#$1
endsnippet

## Multiline variable
snippet var
read -r -d $'\0' ${1:var} << '${2:VALUE}'
$3
$2
endsnippet

## Error
snippet e
1>&2
endsnippet

snippet E
cat 1>&2 << 'HELP'
$1
HELP
endsnippet
