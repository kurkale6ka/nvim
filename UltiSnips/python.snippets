snippet #
#! /usr/bin/env python3

"""$1
"""
endsnippet

snippet doc
"""$1"""
endsnippet

# Imports
snippet colors
from styles.styles import Text
endsnippet

snippet env "Use"
env["${1:XDG_CONFIG_HOME}`!p t[1] = t[1].upper()`"]
endsnippet

snippet env "Import"
from os import environ as env
endsnippet

snippet run
from subprocess import run
endsnippet

snippet pp
from pprint import pprint as p
p($1)
endsnippet

# Functional
snippet count
from collections import Counter
$1 = Counter($2)
endsnippet

snippet 'reduce|mul|op' "Reduce" r
from functools import reduce
from operator import ${1:mul}
reduce($1, ${2:list})
endsnippet

snippet comb
from itertools import combinations
for comb in combinations(${1:list}, ${2:n-length}):
	$3
endsnippet

# Options
snippet 'arg(ument)?s|opt(ion)?s' "Options" r
import argparse
parser = argparse.ArgumentParser()
arg$1
args = parser.parse_args()$2
endsnippet

snippet 'arg(ument)?s|opt(ion)?s' "group" r
group = parser.add_mutually_exclusive_group()
endsnippet

snippet 'arg|opt' "--optional" r
parser.add_argument("-`!p snip.rv = t[1][0:1]`", "--$1", action="store_true", help="$2")
endsnippet

snippet 'arg|opt' "--optional with value" r
parser.add_argument("-`!p snip.rv = t[1][0:1]`", "--$1", type=$2, help="$3")
endsnippet

snippet 'arg|opt' "positional" r
parser.add_argument("${1:name}", type=$2, help="$3")
endsnippet

# File open
snippet open
with open("$1") as file:
	for line in file:
endsnippet

# Read from STDIN
snippet read
$1 = input("$2? ")
endsnippet

snippet 'init?|new' "__init__" r
def __init__(self, $1):
	self.$1 = $1
endsnippet

snippet ?
$1 if $2 else $3
endsnippet

snippet tr "transliterate" i
translate(str.maketrans("${1:set1}", "${2:set2}"))
endsnippet

snippet basename
Path("${1:dir}").name
endsnippet

snippet dirname
Path("${1:dir}").parent
endsnippet

snippet mkdir
Path("${1:dir}").mkdir(parents=True, exist_ok=True)
endsnippet

snippet warn
print($1, file=sys.stderr)
endsnippet

snippet 'bench|perf|time' "Time some code" r
import time
tic = time.perf_counter()
toc = time.perf_counter()
print(f"Time elapsed: {toc - tic:0.4f} seconds")
endsnippet

snippet 'multi(proc(essing)?)?' "Multiprocessing" r
from multiprocessing import Process
p = Process(target=$1, args=(${2:cmd},))
p.start()
p.join()
endsnippet

snippet 'async(io)?' "Asyncio" r
async def main():
	async with asyncio.TaskGroup() as tg:
		tg.create_task(${1:func}(${2:parameters}))

asyncio.run(main())
endsnippet

snippet with
from contextlib import contextmanager

@contextmanager
def $1($2):
	try:
		$3
		yield $2
	finally:
		$4
endsnippet

snippet '(all|any)' "all/any" r
`!p snip.rv = match.group(1)`(${1:bool} for ${2:i} in $3)
endsnippet

snippet uniq
groupby(${1:iterable})
endsnippet

snippet os
sys.platform == "${1:linux}"
endsnippet

snippet cpu
os.cpu_count()
endsnippet

snippet //
re.compile(r"$1")
endsnippet

snippet ++ "increment" i
 += 1
endsnippet

snippet main
if __name__ == "__main__":
	$1
endsnippet
