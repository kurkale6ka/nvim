snippet 'perl|!' "perl" r
#! /usr/bin/env perl

endsnippet

# Skel
snippet #
#! /usr/bin/env perl

use v5.22;
use warnings;
use re '/aa';


endsnippet

snippet ## "Skel full"
#! /usr/bin/env perl

use v5.22;
use warnings;
use re '/aa';
use Term::ANSIColor qw/color :constants/;
use Getopt::Long qw/GetOptions :config bundling/;
use File::Basename 'basename';
use File::Path 'make_path';
use List::Util 'any';

my $script = basename \$0;
$script = -f $script ? "./$script" : \$0 =~ s/$ENV{HOME}/~/r unless -l \$0;

# Help
my $help = << "-------";
$script [options]
-------

# Options
GetOptions (
   'h|help' => sub { print $help; exit }
) or die RED.'Error in command line arguments'.RESET, "\n";


endsnippet

snippet script
my $script = basename \$0;
$script = -f $script ? "./$script" : \$0 =~ s/$ENV{HOME}/~/r unless -l \$0;
endsnippet

snippet args "Loop the command line args"
foreach (@ARGV)
{
   $1
}
endsnippet

# Use
snippet 'use|glob' "File::Glob" r
use File::Glob ':bsd_glob';
endsnippet

snippet 'use|color' "Term::ANSIColor" r
use Term::ANSIColor qw/color :constants/;
endsnippet

snippet 'use|colors' "Term::ANSIColor custom" r
use Term::ANSIColor qw/color :constants/;

my $BLUE = color 'ansi69';
my $CYAN = color 'ansi45';
my $GRAY = color 'ansi242';
my $PINK = color 'ansi205';
my $S = color 'bold';
my $R = color 'reset';
endsnippet

snippet 'use|base(name)?' "File::Basename" r
use File::Basename 'basename';
endsnippet

snippet 'use|mkdir' "File::Path" r
use File::Path 'make_path';
endsnippet

snippet 'use|list' "List::Util" r
use List::Util '${1:any}';
endsnippet

snippet 'use|opt(ion)?s' "Getopt::Long" r
use Getopt::Long qw/GetOptions :config bundling/;

# Help
my $help = << "-------";
-------

# Options
GetOptions (
   '`!p snip.rv = t[1][0:1]`|`!p snip.rv = t[1]`' => \\my $$1,
   'h|help' => sub { print $help; exit }
) or die RED.'Error in command line arguments'.RESET, "\n";
endsnippet

snippet opt
'`!p snip.rv = t[1][0:1]`|$1' => \\my $$1,
endsnippet

# Print
snippet '(die|warn)' "err" r
`!p snip.rv = match.group(1)` RED.${1:$!}.RESET, "\n";
endsnippet

snippet dump
use Data::Dumper;
print Dumper $1;
endsnippet

snippet doc "Print heredoc"
   print <<~ '${1:-------}';
   $2
   $1
endsnippet

snippet doc "Assign heredoc"
<< '';
$1
endsnippet

# Open
snippet 'open|read' "File" r
open my $${1:FH}, '${2:<}', '${3:file}' or die RED.$!.RESET, "\n";

while (<$$1>)
{
   chomp;
   $4
}
endsnippet

snippet 'open|pipe|read' "Pipe: read from" r
open my $${1:FH}, '-|', '${2:command}' or die RED.$!.RESET, "\n";

while (<$$1>)
{
   chomp;
   $3
}
endsnippet

snippet 'open|pipe' "Pipe: write to" r
open my $${1:FH}, '|-', '${2:command}' or die RED.$!.RESET, "\n";
print $$1 $3
endsnippet

snippet 'open|read|stdin' "STDIN" r
print '$1: ';
chomp (${2:$_} = <STDIN>);


endsnippet

snippet 'open|read|<>' "DATA or files" r
while (<${1:DATA}>)
{
   chomp;
   $2
}
endsnippet

snippet yes
<STDIN> =~ /y(?:es)?/i;
endsnippet

snippet cd
chdir or die "$!\n";
endsnippet

snippet '(open|read)?dir' "Read a folder into an Array" r
opendir my $${1:DIR}, ${2:'.'} or die RED.$!.RESET, "\n";
my @$3 = grep /$4/, readdir $$1;
endsnippet

snippet '(open|read)?dir' "Read a folder in a Loop" r
opendir my $${1:DIR}, ${2:'.'} or die RED.$!.RESET, "\n";
while (readdir $$1)
{
   $3
}
endsnippet

snippet hot "Piping hot filehandle"
select +(select($$1), $|=1)[0];
endsnippet

# Array/Hash
snippet '\[|@' "array" r
my @${1:array} = qw/${2:word1} ${3:word2} ${4:word3}/;
endsnippet

snippet %
my %$1 =
(
   $2 => '$3',
   $4 => '$5',
);
endsnippet

snippet each
while (my ($${1:key}, $${2:val}) = each %$3)
{
   $4;
}
endsnippet

# Env
snippet env "env" i
$ENV{$1}
endsnippet

snippet xdg "~/.config"
$ENV{XDG_CONFIG_HOME}
endsnippet

snippet xdg "~/.local"
$ENV{XDG_DATA_HOME}
endsnippet

# Regex lookaround
snippet /> "Lookahead" i
(?=$1)
endsnippet

snippet /< "Lookbehind" i
(?<=$1)
endsnippet

# Misc
# todo: stopinsert...
snippet '}|else' "Else" r
} else {
}
endsnippet

snippet 'els(?:e\s*)?if' "Else if" r
} elsif ($1) {
}
endsnippet

snippet for
foreach $1
endsnippet

snippet len
length $1
endsnippet

snippet ?
${1:cond} ? ${2:true} : ${3:false}
endsnippet

snippet my
my ($$1, $$2) = $3;
endsnippet

snippet root
$> == 0
endsnippet

snippet sig "Signal handler"
$SIG{${1:INT}} = sub { die "$2\n"; };
endsnippet

snippet 'sys(tem)?' "System" r
system qw/$1/
endsnippet

snippet 'exec?' "Exec" r
exec qw/$1/
endsnippet

snippet fork "One"
use POSIX ":sys_wait_h";

my $pid = fork // die "failed to fork: $!\n";

# kid
if ($pid == 0)
{
   $1;
   exit;
}

waitpid $pid, WNOHANG;
endsnippet

snippet fork "Many"
my @children;

foreach ($1)
{
   # parent
   my $pid = fork // die "failed to fork: $!\n";

   if ($pid)
   {
      push @children, $pid;
      next;
   }

   # kid
   $2;
   exit;
}

waitpid $_, 0 foreach @children;
endsnippet

snippet 'e?mail' "Email" r
my $to_addr = '$1';
open my $SEND, '|-', qw/mail -s/, '${2:subject}', $to_addr
   or die RED.$!.RESET, "\n";
say $SEND 'body';
endsnippet

snippet 'now|time|date' "Time" r
use Time::Piece;

my $now = Time::Piece->new;
my $timestamp = $now->strftime('%e-%b-%Y');
endsnippet

snippet os
$^O eq '${1:linux}'
endsnippet

snippet '(begin|end)' "BEGIN/END" r
`!p snip.rv = match.group(1).upper()` {
   $1
}
endsnippet

# __END__
snippet '(data|end)' "DATA" r
__`!p snip.rv = match.group(1).upper()`__
endsnippet
