snippet skel
*filter

:INPUT   DROP   [0:0]
:FORWARD DROP   [0:0]
:OUTPUT  ACCEPT [0:0]

-A INPUT  -m state --state ESTABLISHED,RELATED -j ACCEPT
-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

-A INPUT  -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT

## Drop fragmented or null packets
-A INPUT -f -j DROP
-A INPUT -p tcp --tcp-flags ALL NONE -j DROP

$1
# -----------------------------------
# Multiport + comment modules example
-A OUTPUT -d 10.0.1.21 -p tcp -m multiport --dports 3306,6379 -m comment --comment "Host1: MySQL + Redis" -j ACCEPT
-A INPUT  -s 10.0.1.21 -p tcp -m multiport --sports 3306,6379 -m comment --comment "Host1: MySQL + Redis" -j ACCEPT

# Logging example
-A OUTPUT -p tcp --sport 22 -j LOG --log-prefix "[NF]: ssh " --log-level 4

## icmp example using a source ipset
-A INPUT -m set --set lbs src -p icmp --icmp-type any -m comment --comment "LBs: ping" -j ACCEPT
# -----------------------------------

## DNS
# udp
-A OUTPUT -p udp --dport 53 -j ACCEPT
-A INPUT  -p udp --sport 53 -j ACCEPT

# tcp
-A OUTPUT -p tcp --dport 53 -j ACCEPT
-A INPUT  -p tcp --sport 53 -j ACCEPT

## Debug logging
-A INPUT  -m limit --limit 2/min -j LOG --log-prefix "[NF] DROP IN: "  --log-level 4
-A OUTPUT -m limit --limit 2/min -j LOG --log-prefix "[NF] DROP OUT: " --log-level 4

# vim: fde=getline(v\:lnum)=~'^##'?'>'.(matchend(getline(v\:lnum),'##\\+')-1)\:'='

COMMIT
endsnippet
