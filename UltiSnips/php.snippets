snippet skel
<?php

$1
endsnippet

snippet {
<?php

$1
endsnippet

snippet \e
<?php echo \$${1:this->} ?>
endsnippet

snippet \E
<?php echo $1 ?>
endsnippet

snippet '
<?php echo '$1' ?>
endsnippet

snippet php
<?php $1 ?>
endsnippet

snippet \v
var_dump(\$${1:this->}$2);
endsnippet

snippet $
\$this->$1
endsnippet

# Comments
snippet \\
/* $1 */
endsnippet

snippet \cs
/**
 * $1
 */
endsnippet

# Control structures
snippet if
if ($1) \{

   $2;
}

$3
endsnippet

snippet ife
if ($1) \{

   $2;

} else \{

   $3;
}

$4
endsnippet

snippet ifee
if ($1) \{

   $2;

} elseif ($3) \{

   $4;

} else \{

   $5;
}

$6
endsnippet

snippet while
while ($1) \{

   $2;
}

$3
endsnippet

snippet do
do \{
   $1;

} while ($2);

$3
endsnippet

snippet for "foreach: value"
foreach (\$${1:this->array} as \$${2:value}) \{

   ${3:\$$2};
}

$4
endsnippet

snippet for "foreach: key, value"
foreach (\$${1:this->array} as \$${2:key} => \$${3:value}) \{

   ${4:\$$2};
}

$5
endsnippet

snippet for "for"
for (\$${1:i} = ${2:0}; \$$1 <= ${3:11}; \$$1++) \{

   ${4:\$$1};
}

$5
endsnippet

snippet case
switch ($1) \{

   case ${2:0}:
      $3;
      break;

   case ${4:1}:
      $5;
      break;

   case ${6:2}:
      $7;
      break;

   default:
      $8;
}

$9
endsnippet

snippet class
<?php
/**
 * @package ${1:name}
 */
/**
 * ${2:Short Description}
 *
 * @package ${3:$1}
 * @author `g:snips_author` <${4:fname}.${5:lname}@${6:company}>
 */
class ${7:Name} \{

   $8
}
endsnippet

snippet prop
${1:private} \$${2:_property} = ${3:value};

$4
endsnippet

snippet fun
/**
 * ${1:Description}
 *
 * ${2:@param type \$varname description}
 * ${3:@return type description}
 */
${4:private }function ${5:_name}(${6:\$arg1}) \{

   $7;
}

$8
endsnippet

snippet cons
function __construct(${1:\$arg1}) \{

   $2;
}

$3
endsnippet

snippet try
try \{
   $1;

} catch (${2:Exception} \$${3:e}) \{

   ${4:\$$3->getMessage()};
}

$5
endsnippet

snippet [ "Values"
array('${1:val1}', '${2:val2}', '${3:val3}');
endsnippet

snippet [ "Key => Value pairs"
array(
   '${1:key1}' => '${2:val1}',
   '${3:key2}' => '${4:val2}',
   '${5:key3}' => '${6:val3}'
);
endsnippet

snippet ?
${1:condition} ? ${2:true} : ${3:false};
endsnippet
