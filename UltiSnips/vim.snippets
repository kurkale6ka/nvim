snippet skel
" ${1:Short Description}
"
" Author: `g:snips_author` (mitkofr@yahoo.fr), kurkale6ka
"
" Latest version at:
" http://github.com/kurkale6ka/vimfiles/blob/master/plugin/${2:name}.vim

if exists('g:loaded_$2') || &compatible || v:version < 700

   if &compatible && &verbose

      echo "$2 is not designed to work in compatible mode."

   elseif v:version < 700

      echo "$2 needs Vim 7.0 or above to work correctly."
   endif

   finish
endif

let g:loaded_$2 = 1

let s:savecpo = &cpoptions
set cpoptions&vim

function! s:${3:}() range

   " ${4:@todo}
endfunction

vmap <silent> <plug>$2${5:}
   \
   \ :call <sid>$3()<cr>

vmap $6 <plug>$2$5

let &cpoptions = s:savecpo
unlet s:savecpo
endsnippet

snippet save
let save_${1:option} = &$1
set ${2:no}$1
let &$1 = save_$1
endsnippet

snippet fun
function! ${1:s:}(${2:argument})${3: range}

   ${4:a:$2}
endfunction

$5
endsnippet

snippet if
if ${1:condition}
   $2
endif
endsnippet

snippet ife
if ${1:condition}
   $2
else
   $3
endif
endsnippet

snippet ifee
if ${1:condition}
   $2
elseif ${3:condition}
   $4
else
   $5
endif
endsnippet

snippet while
while ${1:condition}

   $2
endwhile

$3
endsnippet

snippet for
for ${1:var} in ${2:list_expression(range(3))}

   $3
endfor

$4
endsnippet

snippet try
try
   $1
catch${2: /E484:/}
   $3
endtry

$4
endsnippet

snippet [ "List"
let ${1:list} = [${2:'item1'}]
endsnippet

snippet [ "Dictionary"
let ${1:dictionary} = {${2:'key1'}: ${3:'value1'}}
endsnippet

snippet ?
${1:condition} ? ${2:true} : ${3:false}
endsnippet

snippet com
command! ${1:-nargs=?} ${2:-complete=customlist} ${3:-range=%} ${4:Name} ${5::call s:Function(<q-args>)}
endsnippet

snippet au
autocmd ${1:opt_group} ${2:event} ${3:file_pattern} ${4:opt_nested} ${5:command}
endsnippet

snippet ~ "Look behind"
\%(${1:pattern1}\)\@<${2:=}${3:pattern2}
endsnippet

snippet ~ "Look ahead"
${1:pattern1}\%(${2:pattern1}\)\@${3:=}
endsnippet

snippet \
<leader>$1
endsnippet

snippet 1
a:firstline$1
endsnippet

snippet 9
a:lastline$1
endsnippet
